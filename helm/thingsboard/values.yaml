#
# Copyright Â© 2016-2020 The Thingsboard Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

global:
  image:
    server: docker.io
    # tag: "3.5.1" # ORIGINAL
    tag: "3.6.2" # ADDED
    pullSecrets: []
    pullPolicy: Always
  jsonLogs: false

nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  # create: true # ORIGINAL
  create: false # ADDED
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

ingress:
  # enabled: false # ORIGINAL
  enabled: true # ADDED
  annotations:
    # {} # ORIGINAL
    alb.ingress.kubernetes.io/scheme: internet-facing # ADDED
    alb.ingress.kubernetes.io/group.name: external-starsensors-io # ADDED
    alb.ingress.kubernetes.io/target-type: ip # ADDED
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTPS":80},{"HTTPS":443}]' # ADDED
    alb.ingress.kubernetes.io/ssl-redirect: "443" # ADDED
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    # - chart-example.local # ORIGINAL
    - things.bluestar.starsensors.io # ADDED
  # Enable or disable tls, same host as above
  tls: false

# set to true to enable monitoring with prometheus
# endpoints in all services, refer to the Metrics
# section in https://thingsboard.io/docs/user-guide/troubleshooting/
monitoring:
  enabled: false

node:
  # kind can be either Deployment or StatefulSet
  kind: StatefulSet
  loadDemo: false
  replicaCount: 1
  image:
    repository: thingsboard/tb-node
    # Overrides the global image values
    #server: docker.io
    #pullPolicy: Always
    #tag: "X.Y.Z"
  port:
    http: 8080
    rpc: 9090
  podAnnotations:
    "prometheus.io/path": "/actuator/prometheus"
    "prometheus.io/port": "8080"
    "prometheus.io/scrape": "true"
  podSecurityContext:
    {}
    # fsGroup: 2000
  securityContext:
    {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000
  service:
    type: ClusterIP # ORIGINAL
    # type: NodePort # ADDED
    port: 8080
  state:
    # defaultInactivityTimeoutInSec: "600" # ORIGINAL
    defaultInactivityTimeoutInSec: "1800"
  resources:
    {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80
  nodeSelector: {}
  tolerations: []
  affinity: {}
  ruleChain:
    configmapName:
  authorization:
    tokenExpirationTimeSeconds: "9000"
    refreshTokenExpirationTimeSeconds: "604800"

jsexecutor:
  # kind can be either Deployment or StatefulSet
  kind: Deployment
  image:
    repository: thingsboard/tb-js-executor
    # Overrides the global image values
    #server: docker.io
    #pullPolicy: Always
    #tag: "X.Y.Z"
  # replicaCount: 5 # ORIGINAL
  replicaCount: 0 # ADDED
  podAnnotations: {}
  podSecurityContext: {}
  securityContext: {}
  resources: {}
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80
  nodeSelector: {}
  tolerations: []
  affinity: {}

mqtt:
  # kind can be either Deployment or StatefulSet
  kind: StatefulSet
  image:
    repository: thingsboard/tb-mqtt-transport
    # Overrides the global image values
    #server: docker.io
    #pullPolicy: Always
    #tag: "X.Y.Z"
  # replicaCount: 1 # ORIGINAL
  replicaCount: 0 # ADDED
  ssl:
    enabled: false
    secret: kubernetes-secret
  port:
    number: 8081
    protocol: TCP
    name: mqtt
  http:
    port:
      number: 8082
      protocol: TCP
      name: http
  timeout: 10000
  podAnnotations:
    "prometheus.io/path": "/actuator/prometheus"
    "prometheus.io/port": "8082"
    "prometheus.io/scrape": "true"
  podSecurityContext: {}
  securityContext: {}
  service:
    ipv6: false
    type: ClusterIP # ORIGINAL
    # type: NodePort # ADDED
    port: 8883
    # ClusterIP service assings random nodePort when created, can be set to desired value here
    # nodePort: 30883
    additionalPorts: []
    # Allow list of IPs that can access the load balancer where this service is attached to.
    # By default, an empty list blocks all traffic. Example:
    # loadBalancerSourceRanges:
    # - 1.1.1.1/32
    # - 2.2.2.2/32
    loadBalancerSourceRanges: []
  resources: {}
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80
  nodeSelector: {}
  tolerations: []
  affinity: {}
  annotations: {}

http:
  # kind can be either Deployment or StatefulSet
  kind: StatefulSet
  image:
    repository: thingsboard/tb-http-transport
    # Overrides the global image values
    #server: docker.io
    #pullPolicy: Always
    #tag: "X.Y.Z"
  replicaCount: 0
  port:
    number: 8082
    protocol: TCP
    name: http
  timeout: 10000
  podAnnotations: {}
  podSecurityContext: {}
  securityContext: {}
  service:
    type: ClusterIP # ORIGINAL
    # type: NodePort # ADDED
    port: 8082
    additionalPorts: []
  resources: {}
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80
  nodeSelector: {}
  tolerations: []
  affinity: {}
  annotations: {}

coap:
  # kind can be either Deployment or StatefulSet
  kind: StatefulSet
  image:
    repository: thingsboard/tb-coap-transport
    # Overrides the global image values
    #server: docker.io
    #pullPolicy: Always
    #tag: "X.Y.Z"
  # replicaCount: 1 # ORIGINAL
  replicaCount: 0 # ADDED
  port:
    number: 8083
    protocol: UDP
    name: coap
  timeout: 10000
  podAnnotations: {}
  podSecurityContext: {}
  securityContext: {}
  service:
    type: ClusterIP
    port: 8083
    additionalPorts: []
  resources: {}
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80
  nodeSelector: {}
  tolerations: []
  affinity: {}
  annotations: {}

webui:
  # kind can be either Deployment or StatefulSet
  kind: Deployment
  image:
    repository: thingsboard/tb-web-ui
    # Overrides the global image values
    #server: docker.io
    #pullPolicy: Always
    #tag: "X.Y.Z"
  replicaCount: 0
  port:
    number: 8084
    protocol: TCP
    name: http
  podAnnotations: {}
  podSecurityContext: {}
  securityContext: {}
  service:
    type: ClusterIP # ORIGINAL
    # type: NodePort # ADDED
    port: 8084
    additionalPorts: []
  resources: {}
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80
  nodeSelector: {}
  tolerations: []
  affinity: {}
  annotations: {}

cassandraInitDB:
  keyspace: thingsboard
  replication:
    class: SimpleStrategy
    factor: 1

initDBJob:
  # Set this value with current version of Thingsboard database if only if a database migration is needed.
  # Database migration will be triggered starting at this version up to version currently installed by the helm command.
  fromVersion: ""
  # Constrain Pods to nodes with specific labels
  # ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#nodeselector
  nodeSelector: {}
  # Allow the scheduler to schedule pods with matching taints
  # ref: https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/
  tolerations: []
  # Expands the types of constraints you can define
  # ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#affinity-and-anti-affinity
  affinity: {}

postgresInitDB:
  job:
    check:
      # default value of the timeout for the pg_isready command
      timeout: 3

timescale:
  # enabled: false
  enabled: true

cassandra:
  # Database can be either postgres or hybrid (entities in postgres and timeseries in cassandra)
  # for an postgresql database set cassandra.enabled as false
  # for an hybrid database set cassandra.enabled as true
  enabled: false
  replicaCount: 1
  dbUser:
    password: setplease
  extraEnvVars:
    - name: JVM_OPTS
      value: "-Dcom.sun.management.jmxremote.authenticate=true -Dcassandra.jmx.remote.login.config=CassandraLogin -Djava.security.auth.login.config=/opt/bitnami/cassandra/conf/cassandra-jaas.config -Dcassandra.jmx.authorizer=org.apache.cassandra.auth.jmx.AuthorizationProxy -Dcassandra.jmx.remote.port=7199"

# Configuration for an external database if it's not desired to deploy
# and use one internally in the cluster. These values will only be
# used if postgresql-ha.enabled is false.
postgresqlExternal:
  # INPUT NEEDED if postgresql-ha.enabled is false
  # hostname: setplease # ORIGINAL
  hostname: timescale.bluestar.svc.cluster.local # ADDED
  # INPUT NEEDED if postgresql-ha.enabled is false
  port: 5432
  # INPUT NEEDED if postgresql-ha.enabled is false
  database: thingsboard
  # INPUT NEEDED if postgresql-ha.enabled is false
  username: postgres
  # INPUT NEEDED if postgresql-ha.enabled is false
  password: setplease

postgresql-ha:
  # enabled: true # ORIGINAL
  enabled: false # ADDED
  nameOverride: pg
  postgresql:
    database: thingsboard
    replicaCount: 1
    password: setplease
    repmgrPassword: setplease
  postgresqlImage:
    tag: 12
  pgpool:
    adminPassword: setplease
    replicaCount: 1
    useLoadBalancing: false
  pgpoolImage:
    tag: 4.3.3

redis:
  # Set architecture to either standalone or replication
  architecture: standalone
  auth:
    password: setplease
  master:
    kind: Deployment
    persistence:
      enabled: false
    disableCommands:
      - FLUSHALL
  replica:
    replicaCount: 0
    persistence:
      enabled: false

kafka:
  persistence:
    enabled: false
  service: # ADDED
    ports: # ADDED
      client: 9092 # ADDED
  zookeeper:
    persistence:
      enabled: false
    containerPorts: # ADDED
      client: 2181 # ADDED

sql:
  attributes:
    batch:
      threads: 30
  events:
    batch:
      threads: 10
  ts:
    batch:
      threads: 10
    ttl:
      enabled: true
      value: 0
      execution_interval: 86400000
  ts-latest:
    batch:
      threads: 10
  timescale:
    batch:
      threads: 10

rule-engine:
  prometheus-stats:
    enabled: true
  queues:
    main:
      processing-strategy-type: SKIP_ALL_FAILURES_AND_TIMED_OUT
